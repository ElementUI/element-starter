// Mixins (Not in Foundation)
// --------------------------
@mixin fa-icon {
    font: normal normal normal 14px/1 "BritecoreIcons";
    font-size: inherit;
    text-align: center;
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    width: 1.28571429em;
}

@mixin hidden--accessible {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
    white-space: nowrap;
}

@mixin ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin inline-block-center {
    &:after {
        display: inline-block;
        content: "";
        height: 100%;
        vertical-align: middle;
    }
}


@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

@mixin form-element {
    // display: block;
    // width: 100%;
    // height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    // padding: $padding-base-vertical $padding-base-horizontal;
    // font-size: $font-size-base;
    // line-height: $line-height-base;
    // color: $input-color;
    // background-color: $input-bg;
    // border: 1px solid $input-border;
    // border-radius: $input-border-radius;
    // box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
    //
    // transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
    // //@include form-control-focus;
}

@mixin primary-button {
    // background-color: $btn-primary-bg;
    // color: $btn-primary-color;
    // box-shadow: 0 1px 1px rgba(0, 0, 0, .3), inset 0px 1px 1px rgba(255, 255, 255, .1);
    // border: 1px solid darken($btn-primary-bg, 5%);
    // text-shadow: 0 1px 0 rgba(0, 0, 0, .2);
    //
    // &:hover {
    //     background-color: darken($btn-primary-bg, 5%);
    // }
}
@mixin disable-mouse-outline {
    [data-whatinput='mouse'] & {
        outline: 0;
    }
}

// Taken from Foundation ...
// Creates a CSS triangle, which can be used for dropdown arrows, dropdown pips, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
//
// @param {Number} $triangle-size - Width of the triangle.
// @param {Color} $triangle-color - Color of the triangle.
// @param {Keyword} $triangle-direction - Direction the triangle points. Can be `up`, `right`, `down`, or `left`.
@mixin css-triangle(
  $triangle-size,
  $triangle-color,
  $triangle-direction
) {
  display: block;
  width: 0;
  height: 0;

  border: inset $triangle-size;

  content: '';

  @if ($triangle-direction == down) {
    border-bottom-width: 0;
    border-top-style: solid;
    border-color: $triangle-color transparent transparent;
  }
  @if ($triangle-direction == up) {
    border-top-width: 0;
    border-bottom-style: solid;
    border-color: transparent transparent $triangle-color;
  }
  @if ($triangle-direction == right) {
    border-right-width: 0;
    border-left-style: solid;
    border-color: transparent transparent transparent $triangle-color;
  }
  @if ($triangle-direction == left) {
    border-left-width: 0;
    border-right-style: solid;
    border-color: transparent $triangle-color transparent transparent;
  }
}
